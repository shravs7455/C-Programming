//Array is sorted. Using low, mid, high 
Time Complexity - min = O(n) , max = O(logn) , Average = O(logn) , 

/* Algorithm
BinSearch (l,h,key)
while(l<=h)
{
  mid=(l+h)/2
  if(key==A[mid])
    return mid;
  else if(key<A[mid])
    h=mid-1;
   else l=mid+1;
}
return -1;
---------------------------------------
Recursive_BinSearch(l,h,key)
{
  if(l<=h)
  {
    mid=(l+h)/2;
    if(key==A[mid])
      return mid;
    else if(key<A[mid])
      return Recursive_BinSearch(l,mid-1,key);
    else return Recursive_BinSearch(l,mid+1,key);
   }
   return -1;
  }
  */

#include<stdio.h>
struct Array
{
    int A[10];
    int size;
    int length;
};
void Display(struct Array arr)
{
    int i;
    printf("\nElements are\n");
    for(i=0;i<arr.length;i++)
        printf("%d ",arr.A[i]);
}

int Recursive_BinSearch(int A[], int l, int h, int key)
{
    int mid;
    if(l<=h)
    {
         mid=(l+h)/2;
        if(key==A[mid])
          return mid;
        else if(key<A[mid])
          return Recursive_BinSearch(A,l,mid-1,key);
        else return Recursive_BinSearch(A,l,mid+1,key);
    }
    return -1;
}
int BinarySearch(struct Array arr, int key)
{
    int l,m,h;
    l=0;
    h=arr.length-1;
    while(l<=h)
    {
        mid=(l+h)/2;
        if(key==arr.A[mid])
            return mid;
        else if(key<arr.A[mid])
            h=mid-1;
        else l=mid+1;
    }
    return -1;
}
int main()
{
    struct Array arr1={{2,23,14,5,6,9,8,12},10,8};
    printf("%d",LinearSearch(&arr1,14));
    printf("%d",Recursive_BinSearch(arr1,0,arr.length,14));
    Display(arr1);
    return 0;
}
