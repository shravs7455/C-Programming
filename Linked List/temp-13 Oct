#include <iostream>
using namespace std;
#define MIN_INT -3124
struct node
{
    int data;
    struct node* next;
}*first=NULL;

void create(int a[],int n)
{
    int i;
    struct node *t, *last;
    first=(struct node*)malloc(sizeof(struct node));
    first->data=a[0];
    first->next=NULL;
    last=first;
    for(i=1;i<n;i++)
    {
        t=(struct node*)malloc(sizeof(struct node));
        t->data=a[i];
        t->next=NULL;
        last->next=t;
        last=t;
    }
}
void display(struct node* p)
{
    while(p!=NULL)
    {
        cout<<p->data;
        p=p->next;
    }
}
void recursive_disp(struct node*p)
{
    if(p!=NULL)
    {
        cout<<p->data;
        recursive_disp(p->next);
    }
}
int count(struct node* p)
{
    int c=0;
    while(p!=NULL)
    {
        c++;
        p=p->next;
    }
    return c;
}
int recursive_count(struct node* p)
{
    if(p==NULL)
        return 0;
    return recursive_count(p->next)+1;
}
int add(struct node* p)
{
    int sum=0;
    while(p)
    {
        sum+=p->data;
        p=p->next;
    }
    return sum;
}
int recursive_add(struct node* p)
{
    if(p==NULL)
        return 0;
    return recursive_add(p->next)+p->data;
}
int max(struct node* p)
{
    int max=MIN_INT;
    while(p)
    {
        if(p->data>max)
            max=p->data;
        p=p->next;
    }
    return max;
}
int recursive_max(struct node* p)
{
    int x=0;
    if(p==NULL)
        return MIN_INT;
    else 
    {
        x=recursive_max(p->next);
        /*if(x>p->data)
            return x;
        else return p->data;*/ 
    }
    return x>p->data?x:p->data; //ternary for the above if check
}
struct node* search(struct node*p,int key)
{
    while(p!=NULL)
    {
        if(key==p->data)
        {
            return p;
        }
        p=p->next;
    }
    return NULL;
}
struct node* recursive_search(struct node*p,int key)
{
    if(p==NULL)
        return NULL;
    if(p->data==key)
        return p;
    return recursive_search(p->next,key);
}
//Shifting key to head
struct node* search2(node*p,int key)
{
    node *q=NULL;
    while(p!=NULL)
    {
        if(key==p->data)
        {
            q->next=p->next;
            p->next=first;
            first=p;
            return p;
        }
        q=p;
        p=p->next;
    }
    return NULL;
}

void insert(struct node *p, int pos, int x)
{
    if(pos<0||pos>count(p))
        return;
    struct node *t;
    t= new node;
    t->data=x;
    if(pos==0)
    {
        t->next=first;
        first=t;
    }
    else
    {
        for(int i=0;i<pos-1;i++)
        {
            p=p->next;
        }
        t->next=p->next;
        p->next=t;
    }
}
int delete(int pos)
{
    if(pos<0||pos>count(p))
        return -1;
    node *p, *q;
    int x=-1,i;
    if(pos==1)
    {
        q=first;
        x-first->data;
        first=first->next;
        delete q;
        return x;
    }
    else
    {
        p=first;
        q=NULL;
        for(i=0;i<pos-1&&p;i++)
        {
            q=p;
            p=p->next;
        }
        if(p)
        {
            q->next=p->next;
            x=p->data;
            delete p;
            return x;
        }
    }
}
int main()
{
    cout<<"Hello World";

    return 0;
}
