#include<stdio.h>
struct Array
{
    int A[10];
    int size;
    int length;
};
void Display(struct Array arr)
{
    int i;
    printf("\nElements are\n");
    for(i=0;i<arr.length;i++)
        printf("%d ",arr.A[i]);
}

void InsertSort(struct Array *arr, int x)
{
    int i=arr->length-1;
    if(arr->length==arr->size)
        return;
    while(i>=0 && arr->A[i]>x)
    {
      arr->A[i+1]=arr->A[i];
      i--;
    }
    arr->A[i+1]=x;
    arr->length++;
}
void Merge(struct Array *arr1, struct Array *arr2)
{
    while(i<arr1->length && j<arr2->length)
    {
        if(arr1->A[i]<arr2->A[j])
            arr3->A[k++]=arr1->A[i++]
        else arr3->A[k++]=arr1->A[j++]
    }
}
int Recursive_BinSearch(int A[], int l, int h, int key)
{
    int mid;
    if(l<=h)
    {
        mid=(l+h)/2;
        if(key==A[mid])
          return mid;
        else if(key<A[mid])
          return Recursive_BinSearch(A,l,mid-1,key);
        else return Recursive_BinSearch(A,l,mid+1,key);
    }
    return -1;
}
int BinarySearch(struct Array arr, int key)
{
    int l,mid,h;
    l=0;
    h=arr.length-1;
    while(l<=h)
    {
        mid=(l+h)/2;
        if(key==arr.A[mid])
            return mid;
        else if(key<arr.A[mid])
            h=mid-1;
        else l=mid+1;
    }
    return -1;
}
int main()
{
    struct Array arr1={{2,23,14,5,6,9,8,12},10,8};
   // printf("%d",LinearSearch(&arr1,14));
    printf("%d",Recursive_BinSearch(arr1.A,0,arr1.length,14));
   // InsertSort(&arr1,3);
    Display(arr1);
    return 0;
}
